plugins {
    id 'java'
    alias libs.plugins.protobuf
    alias libs.plugins.jib
    alias libs.plugins.spring.boot
    alias libs.plugins.nexus
}

subprojects {
    if (['api', 'container'].contains(name)) {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
        apply from: "$rootDir/publish.gradle"
    }
}

group = 'boozilla.houston'
version = '1.0.13'

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto-internal'
            srcDir 'src/main/proto-public'
        }
    }
}

processResources {
    filesMatching('**/application.yml') {
        expand(project.properties)
    }
}

nexusPublishing {
    packageGroup = 'io.github.boozilla'

    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))

            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

protobuf {
    def protobufVersion = libs.versions.protobuf.asProvider().get()
    def grpcVersion = libs.versions.grpc.get()
    def reactorGrpcVersion = libs.versions.reactor.grpc.get()

    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }

        reactor {
            artifact = "com.salesforce.servicelibs:reactor-grpc:${reactorGrpcVersion}"
        }
    }

    generateProtoTasks {
        ofSourceSet("main")*.plugins {
            grpc {}
            reactor {}
        }

        all().each { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeSourceInfo = true
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.path =
                    "${layout.buildDirectory.getAsFile().get().path}/resources/main/META-INF/armeria/grpc/service-name.dsc"
        }
    }
}

jib {
    from {
        image = "azul/zulu-openjdk:24-latest"

        platforms {
            platform {
                architecture = "arm64"
                os = "linux"
            }

            platform {
                architecture = "amd64"
                os = "linux"
            }
        }
    }

    to {
        tags = ["${project.version}"]
    }

    container {
        mainClass = "boozilla.houston.Application"
        creationTime = "USE_CURRENT_TIMESTAMP"
        ports = ["8080"]
        jvmFlags = [
                '-XshowSettings:vm',
                '-XX:+EnableDynamicAgentLoading',
                '-XX:MinRAMPercentage=50',
                '-XX:MaxRAMPercentage=80'
        ]
    }
}

bootJar {
    launchScript()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':api')
    implementation project(':container')

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testImplementation platform(libs.junit.bom)
    testImplementation libs.junit.jupiter

    implementation libs.armeria
    implementation libs.armeria.dropwizard2
    implementation libs.armeria.logback
    implementation libs.armeria.spring.boot3.webflux.starter
    implementation libs.armeria.spring.boot3.autoconfigure
    implementation libs.armeria.grpc
    implementation libs.armeria.grpc.protocol
    implementation libs.armeria.protobuf

    implementation libs.reactor.core
    implementation libs.reactor.tools

    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.data.r2dbc

    implementation libs.micrometer.core
    implementation libs.micrometer.registry.cloudwatch2

    implementation libs.protobuf.java
    implementation libs.reactor.grpc.stub

    implementation libs.jasync.mysql
    implementation libs.jasync.r2dbc.mysql
    implementation libs.cqengine
    implementation libs.jsqlparser

    implementation libs.fastexcel
    implementation libs.fastexcel.reader

    implementation libs.aws.secretsmanager
    implementation libs.aws.kms
    implementation libs.aws.s3
    runtimeOnly libs.aws.sso
    runtimeOnly libs.aws.ssooidc
    runtimeOnly libs.aws.auth

    implementation libs.java.jwt

    implementation libs.picocli

    implementation libs.jsch
}

tasks.register('generateAdminToken', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'boozilla.houston.AdminTokenGenerator'
}
