plugins {
    id 'java'
    id 'com.google.protobuf'
    id 'com.google.cloud.tools.jib' version '3.4.3'
}

subprojects {
    if (['api', 'container'].contains(name)) {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
        apply from: "$rootDir/publish.gradle"
    }
}

group = 'boozilla.houston'
version = '1.0.2'

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto-internal'
            srcDir 'src/main/proto-public'
        }
    }
}

processResources {
    filesMatching('**/application.yml') {
        expand(project.properties)
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        reactor {
            artifact = "com.salesforce.servicelibs:reactor-grpc:${reactorGrpcVersion}"
        }
    }

    generateProtoTasks {
        ofSourceSet("main")*.plugins {
            grpc {}
            reactor {}
        }

        all().each { task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeSourceInfo = true
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.path =
                    "${layout.buildDirectory.getAsFile().get().path}/resources/main/META-INF/armeria/grpc/service-name.dsc"
        }
    }
}

jib {
    from {
        image = "azul/zulu-openjdk:21-latest"

        platforms {
            platform {
                architecture = "arm64"
                os = "linux"
            }

            platform {
                architecture = "amd64"
                os = "linux"
            }
        }
    }

    to {
        tags = ["${project.version}"]
    }

    container {
        mainClass = "boozilla.houston.Application"
        creationTime = "USE_CURRENT_TIMESTAMP"
        ports = ["8080"]
        jvmFlags = [
                '-XshowSettings:vm',
                '-XX:+EnableDynamicAgentLoading',
                '-XX:MinRAMPercentage=50',
                '-XX:MaxRAMPercentage=80'
        ]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':api')
    implementation project(':container')

    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    ["armeria",
     "armeria-dropwizard2",
     "armeria-logback",
     "armeria-spring-boot3-webflux-starter",
     "armeria-spring-boot3-autoconfigure",
     "armeria-grpc",
     "armeria-grpc-protocol",
     "armeria-protobuf"].each {
        implementation "com.linecorp.armeria:${it}:${armeriaVersion}"
    }

    implementation "io.projectreactor:reactor-core:${reactorVersion}"
    implementation "io.projectreactor:reactor-tools:${reactorVersion}"

    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-r2dbc:${springBootVersion}"

    implementation "io.micrometer:micrometer-core:${micrometerVersion}"
    implementation "io.micrometer:micrometer-registry-cloudwatch2:${micrometerVersion}"

    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "com.salesforce.servicelibs:reactor-grpc-stub:${reactorGrpcVersion}"

    implementation "com.github.jasync-sql:jasync-mysql:${jasyncVersion}"
    implementation "com.github.jasync-sql:jasync-r2dbc-mysql:${jasyncVersion}"
    implementation "com.googlecode.cqengine:cqengine:${cqengineVersion}"
    implementation "com.github.jsqlparser:jsqlparser:${jsqlParserVersion}"

    implementation "org.dhatim:fastexcel:${fastexcelVersion}"
    implementation "org.dhatim:fastexcel-reader:${fastexcelVersion}"

    implementation "software.amazon.awssdk:secretsmanager:${awssdkVersion}"
    implementation "software.amazon.awssdk:kms:${awssdkVersion}"
    implementation "software.amazon.awssdk:s3:${awssdkVersion}"

    implementation "com.auth0:java-jwt:${javaJwtVersion}"

    implementation "info.picocli:picocli:${picocliVersion}"
}

test {
    useJUnitPlatform()
}

tasks.register('generateAdminToken', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'boozilla.houston.AdminTokenGenerator'
}
