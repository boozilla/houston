plugins {
    id 'java-library'
    id 'com.google.protobuf'
    id 'maven-publish'
    id 'signing'
}

group = rootProject.group
version = rootProject.version

sourceSets {
    main {
        proto {
            srcDir rootProject.sourceSets.main.proto.srcDirs
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
}

tasks.every { task ->
    task.dependsOn ':extractProto'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        api(MavenPublication) {
            groupId = "io.github.boozilla"
            artifactId = "houston-${project.name}"

            from components.java

            pom {
                name = project.name
                description = 'houston common module'
                url = 'https://github.com/boozilla/houston'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'boozilla'
                        name = 'Chanhwi Kim'
                        email = 'io.async@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/boozilla/houston.git'
                    developerConnection = 'scm:git:ssh://github.com/boozilla/houston.git'
                    url = 'https://github.com/boozilla/houston.git'
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"

            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    useGpgCmd()

    sign publishing.publications
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "io.projectreactor:reactor-core:${reactorVersion}"
    implementation "io.projectreactor:reactor-tools:${reactorVersion}"

    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
}

test {
    useJUnitPlatform()
}